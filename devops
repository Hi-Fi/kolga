#!/usr/bin/env python3

import argparse


class Devops:
    def __init__(self) -> None:
        self.parser = argparse.ArgumentParser(description="Anders Devops")
        subparsers = self.parser.add_subparsers(
            dest="command", metavar="<command>", required=True,
        )

        subparsers.add_parser(
            "create_images", help="Builds Docker images from a local Dockerfile",
        )

        deploy_application_parser = subparsers.add_parser(
            "deploy_application",
            help="Deploy an application based on the current Docker image",
        )
        deploy_application_parser.add_argument(
            "-t", "--track", dest="track", default="stable"
        )

        subparsers.add_parser(
            "docker_test_image", help="Print image tag",
        )

        subparsers.add_parser(
            "help", help="Prints this help message",
        )

        subparsers.add_parser(
            "logo", help="Prints the magnificent Anders DevOps logo",
        )

        subparsers.add_parser(
            "review_cleanup", help="Cleans up the current namespace",
        )

        subparsers.add_parser(
            "test_setup",
            help="Sets up an environment for running tests on built Docker image",
        )

    def run_command(self) -> None:
        args = vars(self.parser.parse_args())
        command = args.pop("command")

        # use dispatch pattern to invoke method with same name
        getattr(self, command)(**args)

    def create_images(self) -> None:
        from scripts.libs.git import Git
        from scripts.libs.docker import Docker

        g = Git()
        g.update_submodules()

        d = Docker()
        d.login()
        images = d.build_stages()
        d.push_images(images)

    def deploy_application(self, track: str) -> None:
        from scripts.libs.kubernetes import Kubernetes
        from scripts.libs.docker import Docker

        d = Docker()

        k = Kubernetes()
        k.setup_helm()
        k.create_namespace()
        secret_name = k.create_secrets_from_environment(track=track)
        k.create_database_deployment(track=track)
        k.create_application_deployment(
            docker_image=d.image_tag, secret_name=secret_name, track=track
        )

    def help(self) -> None:
        self.parser.print_help()

    def review_cleanup(self) -> None:
        from scripts.libs.kubernetes import Kubernetes

        k = Kubernetes()
        k.delete_namespace()

    def test_setup(self) -> None:
        from scripts.libs.docker import Docker
        from scripts.libs.git import Git

        g = Git()
        g.update_submodules()

        d = Docker()
        d.login()
        d.pull_image(d.test_image_tag())

    def docker_test_image(self) -> None:
        from scripts.libs.docker import Docker

        d = Docker()
        print(d.test_image_tag())

    def logo(self) -> None:
        logo = """
      ___            _                ______           _____
     / _ \\          | |               |  _  \\         |  _  |
    / /_\\ \\_ __   __| | ___ _ __ ___  | | | |_____   _| | | |_ __  ___
    |  _  | '_ \\ / _` |/ _ \\ '__/ __| | | | / _ \\ \\ / / | | | '_ \\/ __|
    | | | | | | | (_| |  __/ |  \\__ \\ | |/ /  __/\\ V /\\ \\_/ / |_) \\__ \\
    \\_| |_/_| |_|\\__,_|\\___|_|  |___/ |___/ \\___| \\_/  \\___/| .__/|___/
                                                            | |
                                                            |_|
        """  # noqa: W291
        print(logo)


if __name__ == "__main__":
    do = Devops()
    do.run_command()
