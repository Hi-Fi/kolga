apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "trackableappname" . }}
  namespace: "{{ .Values.namespace }}"
  annotations:
    app.gitlab.com/app: "{{ .Values.gitlab.app }}"
    app.gitlab.com/env: "{{ .Values.gitlab.env }}"
  labels:
    app: {{ template "appname" . }}
    release: "{{ .Release.Name }}"
    track: "{{ .Values.application.track }}"
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "appname" . }}
  template:
    metadata:
      annotations:
        app.gitlab.com/app: "{{ .Values.gitlab.app }}"
        app.gitlab.com/env: "{{ .Values.gitlab.env }}"
      labels:
        track: "{{ .Values.application.track }}"
        release: "{{ .Release.Name }}"
        app: {{ template "appname" . }}
    spec:
      containers:
        - name: "{{ .Chart.Name }}"
          image: "{{ .Values.image }}"
          imagePullPolicy: {{ .Values.app_image.pullPolicy }}
          {{- if .Values.application.secretName }}
          envFrom:
          - secretRef:
                name: {{ .Values.application.secretName }}
          {{- end }}
          env:
            - name: DATABASE_URL
              value: {{ .Values.application.database_url | quote }}
            - name: DATABASE_HOST
              value: {{ .Values.application.database_host | quote }}
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: APPLICATION_URL
              value: {{ template "hostname" .Values.service.url }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 15
            httpGet:
              path: /healthz
              port: {{ .Values.service.targetPort }}
          readinessProbe:
            initialDelaySeconds: 15
            httpGet:
              path: /readiness
              port: {{ .Values.service.targetPort }}
          {{- if .Values.application.temporaryStoragePath }}
          volumeMounts:
            - mountPath: {{ .Values.application.temporaryStoragePath }}
              name: non-persistent-writable-volume
          {{- end }}
      imagePullSecrets:
        - name: regcred
      {{- if .Values.application.temporaryStoragePath }}
      volumes:
        - name: non-persistent-writable-volume
          emptyDir: {}
      {{- end }}
